<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SignalGo.Client</name>
    </assembly>
    <members>
        <member name="T:SignalGo.Client.ClientDuplex">
            <summary>
            a client duplex class
            </summary>
        </member>
        <member name="T:SignalGo.Client.OperationCalls">
            <summary>
            an opration calls interface for inject code
            </summary>
        </member>
        <member name="T:SignalGo.Client.ClientProvider">
            <summary>
            provider for client to connect server and user calls and callbacks
            </summary>
        </member>
        <member name="M:SignalGo.Client.ClientProvider.Connect(System.String,System.Boolean)">
            <summary>
            connect to server
            </summary>
            <param name="url">server url address</param>
        </member>
        <member name="M:SignalGo.Client.ClientProvider.ConnectToUrl(System.String)">
            <summary>
            send data to server for accept reality connection
            </summary>
            <param name="url"></param>
        </member>
        <member name="T:SignalGo.Client.ConnectorExtension">
            <summary>
            connector extensions
            </summary>
        </member>
        <member name="P:SignalGo.Client.ConnectorExtension.WaitedMethodsForResponse">
            <summary>
            call method wait for complete response from clients
            </summary>
        </member>
        <member name="M:SignalGo.Client.ConnectorExtension.SendData``1(SignalGo.Client.OperationCalls,System.String,System.Object[])">
            <summary>
            send data to client
            </summary>
            <typeparam name="T">return type data</typeparam>
            <param name="client">client for send data</param>
            <param name="callerName">method name</param>
            <param name="args">argumants of method</param>
            <returns></returns>
        </member>
        <member name="M:SignalGo.Client.ConnectorExtension.SendData``1(SignalGo.Client.ConnectorBase,SignalGo.Shared.Models.MethodCallInfo)">
            <summary>
            send data to connector
            </summary>
            <typeparam name="T">return type data</typeparam>
            <param name="connector">connetor for send data</param>
            <param name="callInfo">method for send</param>
            <returns></returns>
        </member>
        <member name="M:SignalGo.Client.ConnectorExtension.SendDataInvoke(SignalGo.Client.OperationCalls,System.String,System.Object[])">
            <summary>
            send data none return value
            </summary>
            <param name="client"></param>
            <param name="callerName"></param>
            <param name="args"></param>
        </member>
        <member name="M:SignalGo.Client.ConnectorExtension.SendDataNoParam(SignalGo.Client.OperationCalls,System.String,System.String,System.Object[])">
            <summary>
            send data not use params by array object
            </summary>
            <param name="client"></param>
            <param name="callerName"></param>
            <param name="attibName"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:SignalGo.Client.ConnectorExtension.SendData(SignalGo.Client.OperationCalls,System.String,System.String,System.Object[])">
            <summary>
            send data to server
            </summary>
            <param name="client">client is sended</param>
            <param name="callerName">methos name</param>
            <param name="attibName">service name</param>
            <param name="args">method parameters</param>
            <returns></returns>
        </member>
        <member name="T:SignalGo.Client.ConnectorBase">
            <summary>
            base client connect to server helper
            </summary>
        </member>
        <member name="P:SignalGo.Client.ConnectorBase.IsWebSocket">
            <summary>
            is WebSocket data provider
            </summary>
        </member>
        <member name="P:SignalGo.Client.ConnectorBase.SessionId">
            <summary>
            client session id from server
            </summary>
        </member>
        <member name="P:SignalGo.Client.ConnectorBase.IsDisposed">
            <summary>
            connector is disposed
            </summary>
        </member>
        <member name="P:SignalGo.Client.ConnectorBase.IsConnected">
            <summary>
            if provider is connected
            </summary>
        </member>
        <member name="P:SignalGo.Client.ConnectorBase.OnDisconnected">
            <summary>
            after client disconnected call this action
            </summary>
        </member>
        <member name="P:SignalGo.Client.ConnectorBase.ProviderSetting">
            <summary>
            settings of connector
            </summary>
        </member>
        <member name="F:SignalGo.Client.ConnectorBase._client">
            <summary>
            client tcp
            </summary>
        </member>
        <member name="P:SignalGo.Client.ConnectorBase.Callbacks">
            <summary>
            registred callbacks
            </summary>
        </member>
        <member name="M:SignalGo.Client.ConnectorBase.Connect(System.String,System.Int32)">
            <summary>
            connect to server
            </summary>
            <param name="address">server address</param>
            <param name="port">server port</param>
        </member>
        <member name="M:SignalGo.Client.ConnectorBase.RegisterClientService``1">
            <summary>
            register service and method to server for client call thats
            T type must inherited OprationCalls interface
            </summary>
            <typeparam name="T">type of class for call server methods</typeparam>
            <returns>return instance class for call methods</returns>
        </member>
        <member name="M:SignalGo.Client.ConnectorBase.GetDefault(System.Type)">
            <summary>
            get default value from type
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:SignalGo.Client.ConnectorBase.GetDefaultGeneric``1">
            <summary>
            get default value from type
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:SignalGo.Client.ConnectorBase.RegisterClientServiceInterface``1">
            <summary>
            register service and method to server for client call thats
            </summary>
            <typeparam name="T">type of interface for create instanse</typeparam>
            <returns>return instance of interface that client can call methods</returns>
        </member>
        <member name="M:SignalGo.Client.ConnectorBase.RegisterClientServiceDynamicInterface``1">
            <summary>
            register a callback interface and get dynamic calls
            not work on ios
            using ImpromptuInterface.Impromptu library
            </summary>
            <typeparam name="T">interface to instance</typeparam>
            <returns>return interface type to call methods</returns>
        </member>
        <member name="M:SignalGo.Client.ConnectorBase.RegisterClientServiceDynamic``1">
            <summary>
            register a callback interface and get dynamic calls
            works for all platform like windows ,android ,ios and ...
            </summary>
            <typeparam name="T">interface type for use dynamic call</typeparam>
            <returns>return dynamic type to call methods</returns>
        </member>
        <member name="M:SignalGo.Client.ConnectorBase.RegisterServerCallback``1">
            <summary>
            register server callback class, it's client methods wait for server call thats
            </summary>
            <typeparam name="T">type of your class</typeparam>
            <returns>return instance if type</returns>
        </member>
        <member name="M:SignalGo.Client.ConnectorBase.StartToReadingClientData">
            <summary>
            start client to reading stream and data from server
            </summary>
            <param name="client"></param>
        </member>
        <member name="M:SignalGo.Client.ConnectorBase.SendData(SignalGo.Shared.Models.MethodCallInfo)">
            <summary>
            send data to call server method
            </summary>
            <param name="Data"></param>
        </member>
        <member name="M:SignalGo.Client.ConnectorBase.CallMethod(SignalGo.Shared.Models.MethodCallInfo)">
            <summary>
            call a method of client from server
            </summary>
            <param name="callInfo">method call data</param>
        </member>
        <member name="M:SignalGo.Client.ConnectorBase.ReconnectToUdp(SignalGo.Shared.Models.MethodCallInfo)">
            <summary>
            reconnect to udp service it's call from server tcp service
            </summary>
            <param name="callInfo"></param>
        </member>
        <member name="M:SignalGo.Client.ConnectorBase.SendCallbackData(SignalGo.Shared.Models.MethodCallbackInfo)">
            <summary>
            after call method from server , client must send callback to server
            </summary>
            <param name="callback">method callback data</param>
        </member>
        <member name="M:SignalGo.Client.ConnectorBase.Dispose">
            <summary>
            close and dispose connector
            </summary>
        </member>
        <member name="T:SignalGo.Client.DynamicServiceObject">
            <summary>
            helper of dynamic calls
            </summary>
        </member>
        <member name="P:SignalGo.Client.DynamicServiceObject.ServiceName">
            <summary>
            service name
            </summary>
        </member>
        <member name="P:SignalGo.Client.DynamicServiceObject.Connector">
            <summary>
            connector to call methods
            </summary>
        </member>
        <member name="F:SignalGo.Client.DynamicServiceObject.ReturnTypes">
            <summary>
            types can return of method names
            </summary>
        </member>
        <member name="M:SignalGo.Client.DynamicServiceObject.InitializeInterface(System.Type)">
            <summary>
            initialize type to returnTypes
            </summary>
            <param name="type"></param>
        </member>
        <member name="T:SignalGo.Client.OperationContract">
            <summary>
            an opration contract for get server connector
            </summary>
        </member>
        <member name="F:SignalGo.Client.OperationContract.OpartionContractKeyValues">
            <summary>
            dictionary of connectors
            </summary>
        </member>
        <member name="M:SignalGo.Client.OperationContract.GetConnector``1(System.Object)">
            <summary>
            get connector of object key that add from SetConnector
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:SignalGo.Client.OperationContract.SetConnector(System.Object,System.Object)">
            <summary>
            add connector for a object key
            </summary>
            <param name="data"></param>
            <param name="connector"></param>
        </member>
        <member name="T:SignalGo.Client.SettingInfo">
            <summary>
            setting of client
            </summary>
        </member>
        <member name="P:SignalGo.Client.SettingInfo.IsDisposeClientWhenTimeout">
            <summary>
            if true, when client get timeout error when calling server method client force disposed from signalgo
            </summary>
        </member>
        <member name="T:SignalGo.Client.UdpConnectorBase">
            <summary>
            udp data send and receive for sound and video
            </summary>
        </member>
        <member name="P:SignalGo.Client.UdpConnectorBase.OnReceivedData">
            <summary>
            received data action
            </summary>
        </member>
        <member name="M:SignalGo.Client.UdpConnectorBase.ConnectToUDP(System.String,System.Int32)">
            <summary>
            connect to socket
            </summary>
            <param name="ipAddress"></param>
            <param name="port"></param>
        </member>
        <member name="M:SignalGo.Client.UdpConnectorBase.SendUdpData(System.Byte[])">
            <summary>
            send upd data to server
            </summary>
            <param name="bytes"></param>
        </member>
    </members>
</doc>
