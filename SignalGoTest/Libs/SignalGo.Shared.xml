<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SignalGo.Shared</name>
    </assembly>
    <members>
        <member name="T:SignalGo.Shared.Converters.DataExchangeConverter">
            <summary>
            data exchanger of json serialize or deserializer
            </summary>
        </member>
        <member name="P:SignalGo.Shared.Converters.DataExchangeConverter.Server">
            <summary>
            server of signalGo that called exchanger
            </summary>
        </member>
        <member name="P:SignalGo.Shared.Converters.DataExchangeConverter.Client">
            <summary>
            client of signalGo that called exchanger
            </summary>
        </member>
        <member name="P:SignalGo.Shared.Converters.DataExchangeConverter.ExchangerTypes">
            <summary>
            exchange types
            </summary>
        </member>
        <member name="M:SignalGo.Shared.Converters.DataExchangeConverter.#ctor(SignalGo.LimitExchangeType,SignalGo.Shared.DataTypes.CustomDataExchanger[])">
            <summary>
            constructor of this attrib neeed your strategy mode
            </summary>
            <param name="mode">strategy mode</param>
            <param name="exchangerTypes">exchange types</param>
        </member>
        <member name="P:SignalGo.Shared.Converters.DataExchangeConverter.Mode">
            <summary>
            your strategy mode for serialize and deserialize
            </summary>
        </member>
        <member name="M:SignalGo.Shared.Converters.DataExchangeConverter.CanConvert(System.Type)">
            <summary>
            can convert or not
            </summary>
            <param name="objectType"></param>
            <returns></returns>
        </member>
        <member name="M:SignalGo.Shared.Converters.DataExchangeConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            read json for deseralize object
            </summary>
            <param name="reader"></param>
            <param name="objectType"></param>
            <param name="existingValue"></param>
            <param name="serializer"></param>
            <returns></returns>
        </member>
        <member name="M:SignalGo.Shared.Converters.DataExchangeConverter.GenerateProperties(System.Object)">
            <summary>
            generate properties of object for deserialze
            </summary>
            <param name="instance"></param>
        </member>
        <member name="M:SignalGo.Shared.Converters.DataExchangeConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            write json for serialize object
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="serializer"></param>
        </member>
        <member name="M:SignalGo.Shared.Converters.DataExchangeConverter.WriteData(System.Type,System.Object,Newtonsoft.Json.JsonWriter,Newtonsoft.Json.JsonSerializer)">
            <summary>
            write data and convert to json for serialize
            </summary>
            <param name="baseType"></param>
            <param name="instance"></param>
            <param name="writer"></param>
            <param name="serializer"></param>
        </member>
        <member name="T:SignalGo.Shared.DataTypes.CustomDataExchanger">
            <summary>
            system custom data exchanger help you to ignore or take custom properties to serialize data
            </summary>
        </member>
        <member name="P:SignalGo.Shared.DataTypes.CustomDataExchanger.CustomDataExchangerType">
            <summary>
            type of data exchanger you need
            </summary>
        </member>
        <member name="P:SignalGo.Shared.DataTypes.CustomDataExchanger.LimitationMode">
            <summary>
            limitation mode in incoming call or outgoingCall
            </summary>
        </member>
        <member name="P:SignalGo.Shared.DataTypes.CustomDataExchanger.Type">
            <summary>
            type of your class to ignore or take properties for serialize
            </summary>
        </member>
        <member name="P:SignalGo.Shared.DataTypes.CustomDataExchanger.Properties">
            <summary>
            property names that you need to ignore or take for serialize
            </summary>
        </member>
        <member name="M:SignalGo.Shared.DataTypes.CustomDataExchanger.#ctor(System.Type,System.String[])">
            <summary>
            default constructor for data exchanger
            </summary>
            <param name="type">type of your class to ignore or take properties for serialize</param>
            <param name="properties">property names that you need to ignore or take for serialize</param>
        </member>
        <member name="M:SignalGo.Shared.DataTypes.CustomDataExchanger.#ctor(System.Type,System.Type[])">
            <summary>
            default constructor for data exchanger
            </summary>
            <param name="type">type of your class to ignore or take properties for serialize</param>
            <param name="properties">list of types you want to take methods of that types</param>
        </member>
        <member name="M:SignalGo.Shared.DataTypes.CustomDataExchanger.GetMethods(System.Type[])">
            <summary>
            get list of methods of type
            </summary>
            <param name="types">your types</param>
            <returns>list of methods names</returns>
        </member>
        <member name="M:SignalGo.Shared.DataTypes.CustomDataExchanger.IsEnabled(System.Object,System.Object,System.String,System.Type)">
            <summary>
            you can customize enable and disable ignorable
            </summary>
            <returns>if you return false system force skip to ignore property</returns>
        </member>
        <member name="T:SignalGo.Shared.DataTypes.IgnoreContract">
            <summary>
            ignore attribute
            </summary>
        </member>
        <member name="T:SignalGo.Shared.DataTypes.OperationContract">
            <summary>
            contract of method name or property name
            </summary>
        </member>
        <member name="T:SignalGo.Shared.DataTypes.InstanceType">
            <summary>
            type of instance
            when cllient connect to servevr and registering service, service class get new instance
            </summary>
        </member>
        <member name="F:SignalGo.Shared.DataTypes.InstanceType.SingleInstance">
            <summary>
            single instance for all of user
            </summary>
        </member>
        <member name="F:SignalGo.Shared.DataTypes.InstanceType.MultipeInstance">
            <summary>
            create new instance per user connection
            </summary>
        </member>
        <member name="T:SignalGo.Shared.DataTypes.ServiceContractAttribute">
            <summary>
            service contract is communicate services between client and server
            </summary>
        </member>
        <member name="M:SignalGo.Shared.DataTypes.ServiceContractAttribute.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:SignalGo.Shared.DataTypes.ServiceContractAttribute.#ctor(System.String,SignalGo.Shared.DataTypes.InstanceType)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="instanceType"></param>
        </member>
        <member name="P:SignalGo.Shared.DataTypes.ServiceContractAttribute.Name">
            <summary>
            name of service
            </summary>
        </member>
        <member name="P:SignalGo.Shared.DataTypes.ServiceContractAttribute.InstanceType">
            <summary>
            when cllient connect to servevr and registering service, service class get new instance
            </summary>
        </member>
        <member name="T:SignalGo.Shared.DataTypes.SkipDataExchangeAttribute">
            <summary>
            skip any data when serialize or deserializing in signalgo
            </summary>
        </member>
        <member name="P:SignalGo.Shared.DataTypes.SkipDataExchangeAttribute.Mode">
            <summary>
            skip mode
            </summary>
        </member>
        <member name="M:SignalGo.Shared.DataTypes.SkipDataExchangeAttribute.#ctor(SignalGo.LimitExchangeType)">
            <summary>
            constructor of this attrib neeed your strategy mode
            </summary>
            <param name="mode">strategy mode</param>
        </member>
        <member name="M:SignalGo.Shared.DataTypes.SkipDataExchangeAttribute.CanIgnore(System.Object,System.Reflection.PropertyInfo,System.Type,SignalGo.Shared.DataTypes.SkipDataExchangeAttribute)">
            <summary>
            you can create your custom skipper with override this method
            when you want to skip to serialize or deserialize your object return true else return false
            default value is null, if you want to system use LimitExchangeType for ignore or not ignore object return null
            </summary>
            <param name="model">object model that want to serialize or deserialize</param>
            <param name="property">property of type that want serialize or deserialize,if it is null parameter type is fill</param>
            <param name="type">type that want serialize or deserialize</param>
            <param name="attribute">attribute</param>
            <returns></returns>
        </member>
        <member name="T:SignalGo.Shared.ConcurrentDictionaryEx">
            <summary>
            ConcurrentDictionary extension helper
            </summary>
        </member>
        <member name="M:SignalGo.Shared.ConcurrentDictionaryEx.Remove``2(System.Collections.Concurrent.ConcurrentDictionary{``0,``1},``0)">
            <summary>
            remove a dictionary key
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="self"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:SignalGo.Shared.AsyncActions">
            <summary>
            run Action on same thread
            </summary>
        </member>
        <member name="P:SignalGo.Shared.AsyncActions.OnActionException">
            <summary>
            if actions return exceptions
            </summary>
        </member>
        <member name="M:SignalGo.Shared.AsyncActions.Run(System.Action,System.Action{System.Exception})">
            <summary>
            Run action on thread
            </summary>
            <param name="action">your action</param>
        </member>
        <member name="T:SignalGo.Shared.Helpers.ConcurrentList`1">
            <summary>
            Represents a thread-safe list
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:SignalGo.Shared.Helpers.CSCodeInjection">
            <summary>
            inject runtime code to your types
            </summary>
        </member>
        <member name="P:SignalGo.Shared.Helpers.CSCodeInjection.InvokedClientMethodAction">
            <summary>
            invoke action for void methods call
            </summary>
        </member>
        <member name="P:SignalGo.Shared.Helpers.CSCodeInjection.InvokedClientMethodFunction">
            <summary>
            invoke function for non-void methods call
            </summary>
        </member>
        <member name="P:SignalGo.Shared.Helpers.CSCodeInjection.InvokedServerMethodAction">
            <summary>
            invoke action for void methods call
            </summary>
        </member>
        <member name="P:SignalGo.Shared.Helpers.CSCodeInjection.InvokedServerMethodFunction">
            <summary>
            invoke function for non-void methods call
            </summary>
        </member>
        <member name="M:SignalGo.Shared.Helpers.CSCodeInjection.GenerateInterfaceType(System.Type,System.Type,System.Collections.Generic.List{System.Type},System.Boolean)">
            <summary>
            generate a class from an interface type
            </summary>
            <param name="type">interafce type</param>
            <param name="inter">a class or interface must inherited</param>
            <param name="assemblyTypes">types of assembly</param>
            <returns>return a new type genearted by code injection</returns>
        </member>
        <member name="T:SignalGo.Shared.Helpers.RuntimeTypeHelper">
            <summary>
            helper of types
            </summary>
        </member>
        <member name="M:SignalGo.Shared.Helpers.RuntimeTypeHelper.GetMethodTypes(System.Type,SignalGo.Shared.Models.MethodCallInfo)">
            <summary>
            return types of method parameter
            </summary>
            <param name="serviceType"></param>
            <param name="callInfo"></param>
            <returns></returns>
        </member>
        <member name="M:SignalGo.Shared.Helpers.RuntimeTypeHelper.GetListOfUsedTypes(System.Type,System.Collections.Generic.List{System.Type}@)">
            <summary>
            get full types of one type that types is in properteis
            </summary>
            <param name="type">your type</param>
            <param name="findedTypes">list of types you want</param>
        </member>
        <member name="T:SignalGo.Shared.Helpers.SerializeObjectType">
            <summary>
            object types of enumerable
            </summary>
        </member>
        <member name="F:SignalGo.Shared.Helpers.SerializeObjectType.None">
            <summary>
            uknown file type or type is null
            </summary>
        </member>
        <member name="T:SignalGo.Shared.Helpers.SerializeHelper">
            <summary>
            helper of serializing
            </summary>
        </member>
        <member name="M:SignalGo.Shared.Helpers.SerializeHelper.GetTypeCodeOfObject(System.Type)">
            <summary>
            get type code of type
            </summary>
            <param name="type">your type</param>
            <returns>type code</returns>
        </member>
        <member name="T:SignalGo.Shared.Helpers.CommentOfClassInfo">
            <summary>
            commment of class type
            </summary>
        </member>
        <member name="P:SignalGo.Shared.Helpers.CommentOfClassInfo.Name">
            <summary>
            name of class
            </summary>
        </member>
        <member name="P:SignalGo.Shared.Helpers.CommentOfClassInfo.Summery">
            <summary>
            summery of comment
            </summary>
        </member>
        <member name="P:SignalGo.Shared.Helpers.CommentOfClassInfo.Methods">
            <summary>
            list of methods
            </summary>
        </member>
        <member name="T:SignalGo.Shared.Helpers.CommentOfMethodInfo">
            <summary>
            comment of method
            </summary>
        </member>
        <member name="P:SignalGo.Shared.Helpers.CommentOfMethodInfo.Name">
            <summary>
            name of method
            </summary>
        </member>
        <member name="P:SignalGo.Shared.Helpers.CommentOfMethodInfo.Summery">
            <summary>
            comment of summery
            </summary>
        </member>
        <member name="P:SignalGo.Shared.Helpers.CommentOfMethodInfo.Returns">
            <summary>
            comment of return value
            </summary>
        </member>
        <member name="P:SignalGo.Shared.Helpers.CommentOfMethodInfo.Parameters">
            <summary>
            list of parameters comment
            </summary>
        </member>
        <member name="P:SignalGo.Shared.Helpers.CommentOfMethodInfo.Exceptions">
            <summary>
            list of exceptions comments
            </summary>
        </member>
        <member name="T:SignalGo.Shared.Helpers.CommentOfParameterInfo">
            <summary>
            comment of parameters
            </summary>
        </member>
        <member name="P:SignalGo.Shared.Helpers.CommentOfParameterInfo.Name">
            <summary>
            name of parameter
            </summary>
        </member>
        <member name="P:SignalGo.Shared.Helpers.CommentOfParameterInfo.Comment">
            <summary>
            comment of parameter
            </summary>
        </member>
        <member name="T:SignalGo.Shared.Helpers.CommentOfExceptionInfo">
            <summary>
            comment of excetions
            </summary>
        </member>
        <member name="P:SignalGo.Shared.Helpers.CommentOfExceptionInfo.Comment">
            <summary>
            comment of exception
            </summary>
        </member>
        <member name="P:SignalGo.Shared.Helpers.CommentOfExceptionInfo.RefrenceType">
            <summary>
            type of exception
            </summary>
        </member>
        <member name="T:SignalGo.Shared.Helpers.XmlCommentLoader">
            <summary>
            load xml document files
            </summary>
        </member>
        <member name="P:SignalGo.Shared.Helpers.XmlCommentLoader.SkipErrors">
            <summary>
            skip exceptions and errors
            </summary>
        </member>
        <member name="M:SignalGo.Shared.Helpers.XmlCommentLoader.GetCommment(System.Reflection.MethodInfo)">
            <summary>
            get comment of method
            </summary>
            <param name="methodInfo">method info</param>
            <returns>comment of method</returns>
        </member>
        <member name="M:SignalGo.Shared.Helpers.XmlCommentLoader.GetCommment(System.Type)">
            <summary>
            get comment of class type
            </summary>
            <param name="classInfo">your type</param>
            <returns>comment of class</returns>
        </member>
        <member name="M:SignalGo.Shared.Helpers.XmlCommentLoader.Dispose">
            <summary>
            dispose
            </summary>
        </member>
        <member name="T:SignalGo.Shared.Http.HttpPostedFileInfo">
            <summary>
            model of post a file from client to server
            </summary>
        </member>
        <member name="P:SignalGo.Shared.Http.HttpPostedFileInfo.Name">
            <summary>
            parameter name
            </summary>
        </member>
        <member name="P:SignalGo.Shared.Http.HttpPostedFileInfo.ContentLength">
            <summary>
            size of file
            </summary>
        </member>
        <member name="P:SignalGo.Shared.Http.HttpPostedFileInfo.ContentType">
            <summary>
            type of file
            </summary>
        </member>
        <member name="P:SignalGo.Shared.Http.HttpPostedFileInfo.FileName">
            <summary>
            name of file
            </summary>
        </member>
        <member name="P:SignalGo.Shared.Http.HttpPostedFileInfo.InputStream">
            <summary>
            stream of file to read
            </summary>
        </member>
        <member name="P:SignalGo.Shared.Http.HttpRequestController.ClientIpAddress">
            <summary>
            ip address of client
            </summary>
        </member>
        <member name="T:SignalGo.Shared.IO.GoStreamReader">
            <summary>
            read signalGo blocks of stream
            </summary>
        </member>
        <member name="M:SignalGo.Shared.IO.GoStreamReader.ReadBlockToEnd(System.Net.Sockets.NetworkStream,SignalGo.CompressMode,System.UInt32,System.Boolean)">
            <summary>
            read data from stream
            </summary>
            <param name="stream">your stream to read a block</param>
            <param name="compress">compress mode</param>
            <returns>return a block byte array</returns>
        </member>
        <member name="M:SignalGo.Shared.IO.GoStreamReader.ReadOneByte(System.Net.Sockets.NetworkStream,SignalGo.CompressMode,System.UInt32,System.Boolean)">
            <summary>
            read one byte from server
            </summary>
            <param name="stream">stream to read</param>
            <param name="compress">compress mode</param>
            <param name="maximum">maximum read</param>
            <param name="isWebSocket">if reading socket is websocket</param>
            <returns></returns>
        </member>
        <member name="T:SignalGo.Shared.IO.GoStreamWriter">
            <summary>
            signalGo stream Writer helper
            </summary>
        </member>
        <member name="M:SignalGo.Shared.IO.GoStreamWriter.WriteToEnd(System.Net.Sockets.UdpClient,System.Net.IPEndPoint,System.Byte[])">
            <summary>
            write a block to end of udpClient
            </summary>
            <param name="udpClient">client</param>
            <param name="iPEndPoint">address to write</param>
            <param name="data">bytes of data to write</param>
        </member>
        <member name="T:SignalGo.Shared.Log.AutoLogger">
            <summary>
            log exceptions and text to log file
            </summary>
        </member>
        <member name="P:SignalGo.Shared.Log.AutoLogger.IsEnabled">
            <summary>
            if false ignore write errors to .log file
            </summary>
        </member>
        <member name="P:SignalGo.Shared.Log.BaseLogInformation.CanWriteToFile">
            <summary>
            after set call method result is going to true and write to log file
            </summary>
        </member>
        <member name="P:SignalGo.Shared.Log.MethodCallsLogger.IsEnabled">
            <summary>
            if false ignore write errors to .log file
            </summary>
        </member>
        <member name="T:SignalGo.Shared.Log.FullLogInfo">
            <summary>
            full log of call and calbacks and http calls
            </summary>
        </member>
        <member name="P:SignalGo.Shared.Log.FullLogInfo.CallOfMethods">
            <summary>
            logs of service method calls
            </summary>
        </member>
        <member name="P:SignalGo.Shared.Log.FullLogInfo.CallbacksOfMethods">
            <summary>
            logs of callbacks method calls
            </summary>
        </member>
        <member name="P:SignalGo.Shared.Log.FullLogInfo.HttpCallsOfMethods">
            <summary>
            logs of http methods calls
            </summary>
        </member>
        <member name="T:SignalGo.Shared.Log.MethodCallsLogLoader">
            <summary>
            load full logs
            </summary>
        </member>
        <member name="P:SignalGo.Shared.Log.MethodCallsLogLoader.LogFolder">
            <summary>
            folder of log files
            </summary>
        </member>
        <member name="M:SignalGo.Shared.Log.MethodCallsLogLoader.GetFullLogInfo(System.DateTime,System.DateTime)">
            <summary>
            get full log info
            </summary>
            <param name="startDateTime"></param>
            <param name="endDateTime"></param>
            <returns></returns>
        </member>
        <member name="M:SignalGo.Shared.Managers.SegmentManager.GenerateAndMixSegments(SignalGo.Shared.Models.ISegment)">
            <summary>
            generate segments, part number 0 = no any parts and part number -1 = end of parts
            </summary>
            <param name="segment"></param>
            <returns></returns>
        </member>
        <member name="P:SignalGo.Shared.Models.HttpControllerDetailsInfo.Id">
            <summary>
            id of class
            </summary>
        </member>
        <member name="P:SignalGo.Shared.Models.HttpControllerDetailsInfo.IsExpanded">
            <summary>
            if item is exanded from treeview
            </summary>
        </member>
        <member name="P:SignalGo.Shared.Models.HttpControllerDetailsInfo.IsSelected">
            <summary>
            if item is selected from treeview
            </summary>
        </member>
        <member name="T:SignalGo.Shared.Models.KeyValue`2">
            <summary>
            a key value class like tupple
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
        </member>
        <member name="T:SignalGo.Shared.Models.MethodCallbackInfo">
            <summary>
            call is return back from client or server
            </summary>
        </member>
        <member name="P:SignalGo.Shared.Models.MethodCallbackInfo.Guid">
            <summary>
            method access code
            </summary>
        </member>
        <member name="P:SignalGo.Shared.Models.MethodCallbackInfo.Data">
            <summary>
            json data
            </summary>
        </member>
        <member name="P:SignalGo.Shared.Models.MethodCallbackInfo.IsException">
            <summary>
            data is exception
            </summary>
        </member>
        <member name="P:SignalGo.Shared.Models.MethodCallbackInfo.IsAccessDenied">
            <summary>
            if client have not permision to call method
            </summary>
        </member>
        <member name="P:SignalGo.Shared.Models.MethodCallbackInfo.PartNumber">
            <summary>
            part number 
            </summary>
        </member>
        <member name="T:SignalGo.Shared.Models.MethodType">
            <summary>
            signal go call method type
            </summary>
        </member>
        <member name="F:SignalGo.Shared.Models.MethodType.User">
            <summary>
            programmer type
            </summary>
        </member>
        <member name="F:SignalGo.Shared.Models.MethodType.SignalGo">
            <summary>
            signalGo type
            </summary>
        </member>
        <member name="T:SignalGo.Shared.Models.MethodCallInfo">
            <summary>
            call info class is data for call client or server method
            </summary>
        </member>
        <member name="P:SignalGo.Shared.Models.MethodCallInfo.Guid">
            <summary>
            method access code
            </summary>
        </member>
        <member name="P:SignalGo.Shared.Models.MethodCallInfo.ServiceName">
            <summary>
            service name in client or server from ServiceContract class
            </summary>
        </member>
        <member name="P:SignalGo.Shared.Models.MethodCallInfo.MethodName">
            <summary>
            method name in client or server from ServiceContract class 
            </summary>
        </member>
        <member name="P:SignalGo.Shared.Models.MethodCallInfo.Data">
            <summary>
            data to send
            </summary>
        </member>
        <member name="P:SignalGo.Shared.Models.MethodCallInfo.Parameters">
            <summary>
            method parameters
            </summary>
        </member>
        <member name="P:SignalGo.Shared.Models.MethodCallInfo.Type">
            <summary>
            sender of call from ignalGo service or not
            </summary>
        </member>
        <member name="P:SignalGo.Shared.Models.MethodCallInfo.PartNumber">
            <summary>
            Part number of call method
            </summary>
        </member>
        <member name="P:SignalGo.Shared.Models.ModelDetailsInfo.Id">
            <summary>
            id of class
            </summary>
        </member>
        <member name="P:SignalGo.Shared.Models.ModelDetailsInfo.Name">
            <summary>
            name of model
            </summary>
        </member>
        <member name="P:SignalGo.Shared.Models.ModelDetailsInfo.FullNameSpace">
            <summary>
            name and namce space of class
            </summary>
        </member>
        <member name="P:SignalGo.Shared.Models.ModelDetailsInfo.Comment">
            <summary>
            comment of class
            </summary>
        </member>
        <member name="P:SignalGo.Shared.Models.ModelDetailsInfo.JsonTemplate">
            <summary>
            json template of model
            </summary>
        </member>
        <member name="P:SignalGo.Shared.Models.ModelDetailsInfo.IsExpanded">
            <summary>
            if item is exanded from treeview
            </summary>
        </member>
        <member name="P:SignalGo.Shared.Models.ModelDetailsInfo.IsSelected">
            <summary>
            if item is selected from treeview
            </summary>
        </member>
        <member name="T:SignalGo.Shared.Models.ParameterInfo">
            <summary>
            a parameter data for method call
            </summary>
        </member>
        <member name="P:SignalGo.Shared.Models.ParameterInfo.Type">
            <summary>
            type of parameter
            </summary>
        </member>
        <member name="P:SignalGo.Shared.Models.ParameterInfo.Value">
            <summary>
            value of parameter
            </summary>
        </member>
        <member name="P:SignalGo.Shared.Models.ProjectDomainDetailsInfo.Id">
            <summary>
            id of class
            </summary>
        </member>
        <member name="P:SignalGo.Shared.Models.ProjectDomainDetailsInfo.IsExpanded">
            <summary>
            if item is exanded from treeview
            </summary>
        </member>
        <member name="P:SignalGo.Shared.Models.ProjectDomainDetailsInfo.IsSelected">
            <summary>
            if item is selected from treeview
            </summary>
        </member>
        <member name="P:SignalGo.Shared.Models.ProviderDetailsInfo.Id">
            <summary>
            id of class
            </summary>
        </member>
        <member name="P:SignalGo.Shared.Models.ProviderDetailsInfo.IsExpanded">
            <summary>
            if item is exanded from treeview
            </summary>
        </member>
        <member name="P:SignalGo.Shared.Models.ProviderDetailsInfo.IsSelected">
            <summary>
            if item is selected from treeview
            </summary>
        </member>
        <member name="T:SignalGo.Shared.Models.ProviderSetting">
            <summary>
            server or client connector provider setting
            </summary>
        </member>
        <member name="P:SignalGo.Shared.Models.ProviderSetting.SendDataTimeout">
            <summary>
            maximum value of timeout to wait for send data
            </summary>
        </member>
        <member name="P:SignalGo.Shared.Models.ProviderSetting.ReceiveDataTimeout">
            <summary>
            maximum value of timeout to wait for receive callbackinfo data
            </summary>
        </member>
        <member name="P:SignalGo.Shared.Models.ProviderSetting.MaximumSendDataBlock">
            <summary>
            maximum send data block
            </summary>
        </member>
        <member name="P:SignalGo.Shared.Models.ProviderSetting.MaximumReceiveDataBlock">
            <summary>
            maximum receive data block
            </summary>
        </member>
        <member name="T:SignalGo.Shared.Models.ServiceDetailsInfo">
            <summary>
            service detail of project
            </summary>
        </member>
        <member name="P:SignalGo.Shared.Models.ServiceDetailsInfo.Id">
            <summary>
            id of class
            </summary>
        </member>
        <member name="P:SignalGo.Shared.Models.ServiceDetailsInfo.ServiceName">
            <summary>
            name of service
            </summary>
        </member>
        <member name="P:SignalGo.Shared.Models.ServiceDetailsInfo.NameSpace">
            <summary>
            name of class
            </summary>
        </member>
        <member name="P:SignalGo.Shared.Models.ServiceDetailsInfo.FullNameSpace">
            <summary>
            name and namce space of class
            </summary>
        </member>
        <member name="P:SignalGo.Shared.Models.ServiceDetailsInfo.Comment">
            <summary>
            comment of class
            </summary>
        </member>
        <member name="P:SignalGo.Shared.Models.ServiceDetailsInfo.Services">
            <summary>
            list of service interfaces
            </summary>
        </member>
        <member name="P:SignalGo.Shared.Models.ServiceDetailsInfo.IsExpanded">
            <summary>
            if item is exanded from treeview
            </summary>
        </member>
        <member name="P:SignalGo.Shared.Models.ServiceDetailsInfo.IsSelected">
            <summary>
            if item is selected from treeview
            </summary>
        </member>
        <member name="T:SignalGo.Shared.Models.ServiceDetailsInterface">
            <summary>
            one of interface
            </summary>
        </member>
        <member name="P:SignalGo.Shared.Models.ServiceDetailsInterface.Id">
            <summary>
            id of class
            </summary>
        </member>
        <member name="P:SignalGo.Shared.Models.ServiceDetailsInterface.NameSpace">
            <summary>
            name of class
            </summary>
        </member>
        <member name="P:SignalGo.Shared.Models.ServiceDetailsInterface.FullNameSpace">
            <summary>
            name and namce space of class
            </summary>
        </member>
        <member name="P:SignalGo.Shared.Models.ServiceDetailsInterface.Comment">
            <summary>
            comment of class
            </summary>
        </member>
        <member name="P:SignalGo.Shared.Models.ServiceDetailsInterface.Methods">
            <summary>
            list of methods
            </summary>
        </member>
        <member name="P:SignalGo.Shared.Models.ServiceDetailsInterface.IsExpanded">
            <summary>
            if item is exanded from treeview
            </summary>
        </member>
        <member name="P:SignalGo.Shared.Models.ServiceDetailsInterface.IsSelected">
            <summary>
            if item is selected from treeview
            </summary>
        </member>
        <member name="T:SignalGo.Shared.Models.ServiceDetailsMethod">
            <summary>
            method of service
            </summary>
        </member>
        <member name="P:SignalGo.Shared.Models.ServiceDetailsMethod.Id">
            <summary>
            id of class
            </summary>
        </member>
        <member name="P:SignalGo.Shared.Models.ServiceDetailsMethod.MethodName">
            <summary>
            name of method
            </summary>
        </member>
        <member name="P:SignalGo.Shared.Models.ServiceDetailsMethod.Comment">
            <summary>
            comment of class
            </summary>
        </member>
        <member name="P:SignalGo.Shared.Models.ServiceDetailsMethod.ReturnComment">
            <summary>
            comment of return type
            </summary>
        </member>
        <member name="P:SignalGo.Shared.Models.ServiceDetailsMethod.ExceptionsComment">
            <summary>
            comment of exceptions
            </summary>
        </member>
        <member name="P:SignalGo.Shared.Models.ServiceDetailsMethod.ReturnType">
            <summary>
            return type
            </summary>
        </member>
        <member name="P:SignalGo.Shared.Models.ServiceDetailsMethod.TestExample">
            <summary>
            test example to call thi method
            </summary>
        </member>
        <member name="P:SignalGo.Shared.Models.ServiceDetailsMethod.Parameters">
            <summary>
            list of parameters
            </summary>
        </member>
        <member name="P:SignalGo.Shared.Models.ServiceDetailsMethod.IsExpanded">
            <summary>
            if item is exanded from treeview
            </summary>
        </member>
        <member name="P:SignalGo.Shared.Models.ServiceDetailsMethod.IsSelected">
            <summary>
            if item is selected from treeview
            </summary>
        </member>
        <member name="T:SignalGo.Shared.Models.ServiceDetailsParameterInfo">
            <summary>
            details of parameter
            </summary>
        </member>
        <member name="P:SignalGo.Shared.Models.ServiceDetailsParameterInfo.Id">
            <summary>
            id of class
            </summary>
        </member>
        <member name="P:SignalGo.Shared.Models.ServiceDetailsParameterInfo.Name">
            <summary>
            name of parameter
            </summary>
        </member>
        <member name="P:SignalGo.Shared.Models.ServiceDetailsParameterInfo.Type">
            <summary>
            type of parameter
            </summary>
        </member>
        <member name="P:SignalGo.Shared.Models.ServiceDetailsParameterInfo.FullTypeName">
            <summary>
            full type name of parameter
            </summary>
        </member>
        <member name="P:SignalGo.Shared.Models.ServiceDetailsParameterInfo.Value">
            <summary>
            value of parameter
            </summary>
        </member>
        <member name="P:SignalGo.Shared.Models.ServiceDetailsParameterInfo.IsJson">
            <summary>
            is value json type
            </summary>
        </member>
        <member name="P:SignalGo.Shared.Models.ServiceDetailsParameterInfo.Comment">
            <summary>
            comment of class
            </summary>
        </member>
        <member name="P:SignalGo.Shared.Models.ServiceDetailsParameterInfo.TemplateValue">
            <summary>
            example template of request data
            </summary>
        </member>
        <member name="P:SignalGo.Shared.Models.ServiceDetailsParameterInfo.IsExpanded">
            <summary>
            if item is exanded from treeview
            </summary>
        </member>
        <member name="P:SignalGo.Shared.Models.ServiceDetailsParameterInfo.IsSelected">
            <summary>
            if item is selected from treeview
            </summary>
        </member>
        <member name="P:SignalGo.Shared.Models.WebApiDetailsInfo.Id">
            <summary>
            id of class
            </summary>
        </member>
        <member name="P:SignalGo.Shared.Models.WebApiDetailsInfo.IsExpanded">
            <summary>
            if item is exanded from treeview
            </summary>
        </member>
        <member name="P:SignalGo.Shared.Models.WebApiDetailsInfo.IsSelected">
            <summary>
            if item is selected from treeview
            </summary>
        </member>
        <member name="T:SignalGo.DataType">
            <summary>
            methods call and callback type
            </summary>
        </member>
        <member name="F:SignalGo.DataType.Unkwnon">
            <summary>
            correct byte
            </summary>
        </member>
        <member name="F:SignalGo.DataType.CallMethod">
            <summary>
            method must call
            </summary>
        </member>
        <member name="F:SignalGo.DataType.ResponseCallMethod">
            <summary>
            response called method
            </summary>
        </member>
        <member name="F:SignalGo.DataType.RegisterFileDownload">
            <summary>
            register a file connection for download
            </summary>
        </member>
        <member name="F:SignalGo.DataType.RegisterFileUpload">
            <summary>
            register a file connection for upload
            </summary>
        </member>
        <member name="F:SignalGo.DataType.PingPong">
            <summary>
            ping pong between client and server
            </summary>
        </member>
        <member name="F:SignalGo.DataType.GetServiceDetails">
            <summary>
            get details of service like methods
            </summary>
        </member>
        <member name="F:SignalGo.DataType.GetMethodParameterDetails">
            <summary>
            get details of method parameters
            </summary>
        </member>
        <member name="T:SignalGo.CompressMode">
            <summary>
            compress mode byte
            </summary>
        </member>
        <member name="F:SignalGo.CompressMode.None">
            <summary>
            no compress
            </summary>
        </member>
        <member name="F:SignalGo.CompressMode.Zip">
            <summary>
            zip compress
            </summary>
        </member>
        <member name="T:SignalGo.SecurityMode">
            <summary>
            mode of security
            </summary>
        </member>
        <member name="F:SignalGo.SecurityMode.None">
            <summary>
            none security
            </summary>
        </member>
        <member name="F:SignalGo.SecurityMode.RSA_AESSecurity">
            <summary>
            rsa and aes security encryption data
            </summary>
        </member>
        <member name="T:SignalGo.LimitExchangeType">
            <summary>
            ignore a property or class in call or receive method
            </summary>
        </member>
        <member name="F:SignalGo.LimitExchangeType.IncomingCall">
            <summary>
            Limit this in all incoming calls
            for example: you calling server method from client, if client sent value server skip this and set to null
            </summary>
        </member>
        <member name="F:SignalGo.LimitExchangeType.OutgoingCall">
            <summary>
            Limit this in all outgoing call
            for example: you calling client method from server this is one outgoig call
            </summary>
        </member>
        <member name="F:SignalGo.LimitExchangeType.Both">
            <summary>
            Limit all incoming and outgoing call
            </summary>
        </member>
        <member name="T:SignalGo.CustomDataExchangerType">
            <summary>
            type of custom data exchanger
            </summary>
        </member>
        <member name="F:SignalGo.CustomDataExchangerType.Take">
            <summary>
            if use take system will take properties for serialize
            </summary>
        </member>
        <member name="F:SignalGo.CustomDataExchangerType.Ignore">
            <summary>
            if use ignore system ignore properties for serialize
            </summary>
        </member>
        <member name="T:System.AttributeHelper">
            <summary>
            Attribute extensions
            </summary>
        </member>
        <member name="M:System.AttributeHelper.GetCustomAttributes``1(System.Type)">
            <summary>Searches and returns attributes. The inheritance chain is not used to find the attributes.</summary>
            <typeparam name="T">The type of attribute to search for.</typeparam>
            <param name="type">The type which is searched for the attributes.</param>
            <returns>Returns all attributes.</returns>
        </member>
        <member name="M:System.AttributeHelper.GetCustomAttributes``1(System.Type,System.Boolean)">
            <summary>Searches and returns attributes.</summary>
            <typeparam name="T">The type of attribute to search for.</typeparam>
            <param name="type">The type which is searched for the attributes.</param>
            <param name="inherit">Specifies whether to search this member's inheritance chain to find the attributes. Interfaces will be searched, too.</param>
            <returns>Returns all attributes.</returns>
        </member>
        <member name="M:System.AttributeHelper.GetCustomAttributes(System.Type,System.Type,System.Boolean)">
            <summary>Private helper for searching attributes.</summary>
            <param name="type">The type which is searched for the attribute.</param>
            <param name="attributeType">The type of attribute to search for.</param>
            <param name="inherit">Specifies whether to search this member's inheritance chain to find the attribute. Interfaces will be searched, too.</param>
            <returns>An array that contains all the custom attributes, or an array with zero elements if no attributes are defined.</returns>
        </member>
        <member name="M:System.AttributeHelper.Apply``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>Applies a function to every element of the list.</summary>
        </member>
        <member name="M:System.ExtensionHelper.ToTextMesage(System.Exception)">
            <summary>
            exception to full text message
            </summary>
            <param name="ex">your exception</param>
            <returns></returns>
        </member>
    </members>
</doc>
